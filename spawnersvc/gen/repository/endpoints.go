// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// repository endpoints
//
// Command:
// $ goa gen github.com/proepkes/speeddate/gamehostsvc/design

package repository

import (
	"context"

	goa "goa.design/goa"
	"goa.design/goa/security"
)

// Endpoints wraps the "repository" service endpoints.
type Endpoints struct {
	Insert goa.Endpoint
	Delete goa.Endpoint
	Get    goa.Endpoint
}

// NewEndpoints wraps the methods of the "repository" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Insert: NewInsertEndpoint(s),
		Delete: NewDeleteEndpoint(s),
		Get:    NewGetEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "repository" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Insert = m(e.Insert)
	e.Delete = m(e.Delete)
	e.Get = m(e.Get)
}

// NewInsertEndpoint returns an endpoint function that calls the method
// "insert" of service "repository".
func NewInsertEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*User)
		return s.Insert(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "repository".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "repository".
func NewGetEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.Get(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredUser(res, view)
		return vres, nil
	}
}
