// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// authstorage HTTP client types
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/storagesvc/design

package client

import (
	authstorage "github.com/proepkes/speeddate/src/storagesvc/gen/authstorage"
	authstorageviews "github.com/proepkes/speeddate/src/storagesvc/gen/authstorage/views"
	goa "goa.design/goa"
)

// InsertRequestBody is the type of the "authstorage" service "insert" endpoint
// HTTP request body.
type InsertRequestBody struct {
	// The username
	Name string `form:"name" json:"name" xml:"name"`
}

// GetResponseBody is the type of the "authstorage" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// UUID is the unique id of the user.
	ID *string `gorm:"TYPE:uuid; COLUMN:id; PRIMARY_KEY; DEFAULT: gen_random_uuid()" json:"id"`
	// The username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Indicates whether the user is currently online.
	Online *bool `form:"online,omitempty" json:"online,omitempty" xml:"online,omitempty"`
}

// GetNotFoundResponseBody is the type of the "authstorage" service "get"
// endpoint HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "authstorage" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewInsertRequestBody builds the HTTP request body from the payload of the
// "insert" endpoint of the "authstorage" service.
func NewInsertRequestBody(p *authstorage.AuthUser) *InsertRequestBody {
	body := &InsertRequestBody{
		Name: p.Name,
	}
	return body
}

// NewGetStoredUserOK builds a "authstorage" service "get" endpoint result from
// a HTTP "OK" response.
func NewGetStoredUserOK(body *GetResponseBody) *authstorageviews.StoredUserView {
	v := &authstorageviews.StoredUserView{
		ID:     body.ID,
		Name:   body.Name,
		Online: body.Online,
	}
	return v
}

// NewGetNotFound builds a authstorage service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewGetUnauthorized builds a authstorage service get endpoint unauthorized
// error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// Validate runs the validations defined on GetNotFoundResponseBody
func (body *GetNotFoundResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on GetUnauthorizedResponseBody
func (body *GetUnauthorizedResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
