// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// fleet views
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa"
)

// StoredFleetCollection is the viewed result type that is projected based on a
// view.
type StoredFleetCollection struct {
	// Type to project
	Projected StoredFleetCollectionView
	// View to render
	View string
}

// StoredFleetCollectionView is a type that runs validations on a projected
// type.
type StoredFleetCollectionView []*StoredFleetView

// StoredFleetView is a type that runs validations on a projected type.
type StoredFleetView struct {
	// The Fleets Name
	Name *string
	// The Fleets ObjectMeta
	ObjectMeta *ObjectMetaView
	// The FleetSpec
	FleetSpec *FleetSpecView
	// The FleetStatus
	FleetStatus *FleetStatusView
}

// ObjectMetaView is a type that runs validations on a projected type.
type ObjectMetaView struct {
	// Prefix for the generated fleetname
	GenerateName *string
	// Namespace where the fleet will run in
	Namespace *string
}

// FleetSpecView is a type that runs validations on a projected type.
type FleetSpecView struct {
	// Replicas
	Replicas *int32
	// Template of the gameserver
	Template *GameserverTemplateView
}

// GameserverTemplateView is a type that runs validations on a projected type.
type GameserverTemplateView struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMetaView
	// GameServerSpec
	GameServerSpec *GameServerSpecView
}

// GameServerSpecView is a type that runs validations on a projected type.
type GameServerSpecView struct {
	// Portpolicy either dynamic or static
	PortPolicy *string
	// Name of the gameserver-container
	ContainerName *string
	// Image of the gameserver
	ContainerImage *string
	// Exposed port of the gameserver
	ContainerPort *int32
}

// FleetStatusView is a type that runs validations on a projected type.
type FleetStatusView struct {
	// Replicas
	Replicas *int32
	// ReadyReplicas
	ReadyReplicas *int32
	// AllocatedReplicas
	AllocatedReplicas *int32
}

// Validate runs the validations defined on the viewed result type
// StoredFleetCollection.
func (result StoredFleetCollection) Validate() (err error) {
	switch result.View {
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// Validate runs the validations defined on StoredFleetCollectionView using the
// "default" view.
func (result StoredFleetCollectionView) Validate() (err error) {
	for _, item := range result {
		if err2 := item.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on StoredFleetView using the "default"
// view.
func (result *StoredFleetView) Validate() (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Name", "result"))
	}
	if result.ObjectMeta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ObjectMeta", "result"))
	}
	if result.FleetSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FleetSpec", "result"))
	}
	if result.ObjectMeta != nil {
		if err2 := result.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.FleetSpec != nil {
		if err2 := result.FleetSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.FleetStatus != nil {
		if err2 := result.FleetStatus.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ObjectMetaView.
func (result *ObjectMetaView) Validate() (err error) {
	if result.GenerateName != nil {
		if utf8.RuneCountInString(*result.GenerateName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.GenerateName", *result.GenerateName, utf8.RuneCountInString(*result.GenerateName), 100, false))
		}
	}
	if result.Namespace != nil {
		if utf8.RuneCountInString(*result.Namespace) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.Namespace", *result.Namespace, utf8.RuneCountInString(*result.Namespace), 100, false))
		}
	}
	return
}

// Validate runs the validations defined on FleetSpecView.
func (result *FleetSpecView) Validate() (err error) {
	if result.Template != nil {
		if err2 := result.Template.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameserverTemplateView.
func (result *GameserverTemplateView) Validate() (err error) {
	if result.ObjectMeta != nil {
		if err2 := result.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.GameServerSpec != nil {
		if err2 := result.GameServerSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameServerSpecView.
func (result *GameServerSpecView) Validate() (err error) {

	return
}

// Validate runs the validations defined on FleetStatusView.
func (result *FleetStatusView) Validate() (err error) {

	return
}
