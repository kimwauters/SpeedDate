// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// fleet client
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package fleet

import (
	"context"

	goa "goa.design/goa"
)

// Client is the "fleet" service client.
type Client struct {
	CreateEndpoint        goa.Endpoint
	DeleteEndpoint        goa.Endpoint
	PatchEndpoint         goa.Endpoint
	ListEndpoint          goa.Endpoint
	AllocateEndpoint      goa.Endpoint
	ConfigurationEndpoint goa.Endpoint
	ConfigureEndpoint     goa.Endpoint
}

// NewClient initializes a "fleet" service client given the endpoints.
func NewClient(create, delete_, patch, list, allocate, configuration, configure goa.Endpoint) *Client {
	return &Client{
		CreateEndpoint:        create,
		DeleteEndpoint:        delete_,
		PatchEndpoint:         patch,
		ListEndpoint:          list,
		AllocateEndpoint:      allocate,
		ConfigurationEndpoint: configuration,
		ConfigureEndpoint:     configure,
	}
}

// Create calls the "create" endpoint of the "fleet" service.
func (c *Client) Create(ctx context.Context, p *Fleet) (res string, err error) {
	var ires interface{}
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Delete calls the "delete" endpoint of the "fleet" service.
// Delete may return the following errors:
//	- "not_found" (type *goa.ServiceError)
//	- error: internal error
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}

// Patch calls the "patch" endpoint of the "fleet" service.
func (c *Client) Patch(ctx context.Context, p *PatchPayload) (res string, err error) {
	var ires interface{}
	ires, err = c.PatchEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// List calls the "list" endpoint of the "fleet" service.
func (c *Client) List(ctx context.Context, p *ListPayload) (res StoredFleetCollection, err error) {
	var ires interface{}
	ires, err = c.ListEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(StoredFleetCollection), nil
}

// Allocate calls the "allocate" endpoint of the "fleet" service.
func (c *Client) Allocate(ctx context.Context, p *AllocatePayload) (res string, err error) {
	var ires interface{}
	ires, err = c.AllocateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Configuration calls the "configuration" endpoint of the "fleet" service.
func (c *Client) Configuration(ctx context.Context) (res *Fleet, err error) {
	var ires interface{}
	ires, err = c.ConfigurationEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*Fleet), nil
}

// Configure calls the "configure" endpoint of the "fleet" service.
func (c *Client) Configure(ctx context.Context, p *ConfigurePayload) (res string, err error) {
	var ires interface{}
	ires, err = c.ConfigureEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}
