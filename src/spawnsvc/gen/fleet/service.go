// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// fleet service
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package fleet

import (
	"context"
)

// The service makes it possible to manage gameservers
type Service interface {
	// Add a new gameserver.
	Add(context.Context) (res string, err error)
	// Create a new fleet.
	Create(context.Context, *Fleet) (res string, err error)
	// Removes all gameserver pods.
	Clear(context.Context) (res string, err error)
	// Get gameserver deployment configuration.
	Configuration(context.Context) (res *GameserverTemplate, err error)
	// Configure gameserver deployment.
	Configure(context.Context, *GameserverTemplate) (res string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "fleet"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"add", "create", "clear", "configuration", "configure"}

// Fleet is the payload type of the fleet service create method.
type Fleet struct {
	// Fleets ObjectMeta
	ObjectMeta *ObjectMeta
	// FleetSpec
	FleetSpec *FleetSpec
}

// GameserverTemplate is the result type of the fleet service configuration
// method.
type GameserverTemplate struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMeta
	// GameServerSpec
	GameServerSpec *GameServerSpec
}

// Spec for ObjectMeta
type ObjectMeta struct {
	// Prefix for the generated fleetname
	GenerateName string
	// Namespace where the fleet will run in
	Namespace string
}

// Spec for Fleet
type FleetSpec struct {
	// Replicas
	Replicas int32
	// Template of the gameserver
	Template *GameserverTemplate
}

// GameserverTemplate describes gameserver
type GameServerSpec struct {
	// Portpolicy either dynamic or static
	PortPolicy string
	// Name of the gameserver-container
	ContainerName string
	// Image of the gameserver
	ContainerImage string
	// Exposed port of the gameserver
	ContainerPort int32
}
