// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// fleet HTTP server types
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package server

import (
	"unicode/utf8"

	fleet "github.com/proepkes/speeddate/src/spawnsvc/gen/fleet"
	fleetviews "github.com/proepkes/speeddate/src/spawnsvc/gen/fleet/views"
	goa "goa.design/goa"
)

// CreateRequestBody is the type of the "fleet" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Fleets ObjectMeta
	ObjectMeta *ObjectMetaRequestBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// FleetSpec
	FleetSpec *FleetSpecRequestBody `form:"FleetSpec,omitempty" json:"FleetSpec,omitempty" xml:"FleetSpec,omitempty"`
}

// ConfigureRequestBody is the type of the "fleet" service "configure" endpoint
// HTTP request body.
type ConfigureRequestBody struct {
	// The NamePrefix
	NamePrefix *string `form:"NamePrefix,omitempty" json:"NamePrefix,omitempty" xml:"NamePrefix,omitempty"`
	// The ContainerImage
	ContainerImage *string `form:"ContainerImage,omitempty" json:"ContainerImage,omitempty" xml:"ContainerImage,omitempty"`
	// The ContainerName
	ContainerName *string `form:"ContainerName,omitempty" json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// The ContainerPort
	ContainerPort *int32 `form:"ContainerPort,omitempty" json:"ContainerPort,omitempty" xml:"ContainerPort,omitempty"`
	// The GameserverNamePrefix
	GameserverNamePrefix *string `form:"GameserverNamePrefix,omitempty" json:"GameserverNamePrefix,omitempty" xml:"GameserverNamePrefix,omitempty"`
	// The Namespace
	Namespace *string `form:"Namespace,omitempty" json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The Replicas
	Replicas *uint32 `form:"Replicas,omitempty" json:"Replicas,omitempty" xml:"Replicas,omitempty"`
}

// StoredFleetResponseCollection is the type of the "fleet" service "list"
// endpoint HTTP response body.
type StoredFleetResponseCollection []*StoredFleetResponse

// ConfigurationResponseBody is the type of the "fleet" service "configuration"
// endpoint HTTP response body.
type ConfigurationResponseBody struct {
	// Fleets ObjectMeta
	ObjectMeta *ObjectMetaResponseBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// FleetSpec
	FleetSpec *FleetSpecResponseBody `form:"FleetSpec" json:"FleetSpec" xml:"FleetSpec"`
}

// StoredFleetResponse is used to define fields on response body types.
type StoredFleetResponse struct {
	// The Fleets Name
	Name string `form:"Name" json:"Name" xml:"Name"`
	// The Fleets ObjectMeta
	ObjectMeta *ObjectMetaResponse `form:"ObjectMeta" json:"ObjectMeta" xml:"ObjectMeta"`
	// The FleetSpec
	FleetSpec *FleetSpecResponse `form:"FleetSpec" json:"FleetSpec" xml:"FleetSpec"`
	// The FleetStatus
	FleetStatus *FleetStatusResponse `form:"FleetStatus,omitempty" json:"FleetStatus,omitempty" xml:"FleetStatus,omitempty"`
}

// ObjectMetaResponse is used to define fields on response body types.
type ObjectMetaResponse struct {
	// Prefix for the generated fleetname
	GenerateName string `form:"GenerateName" json:"GenerateName" xml:"GenerateName"`
	// Namespace where the fleet will run in
	Namespace string `form:"Namespace" json:"Namespace" xml:"Namespace"`
}

// FleetSpecResponse is used to define fields on response body types.
type FleetSpecResponse struct {
	// Replicas
	Replicas int32 `form:"Replicas" json:"Replicas" xml:"Replicas"`
	// Template of the gameserver
	Template *GameserverTemplateResponse `form:"Template" json:"Template" xml:"Template"`
}

// GameserverTemplateResponse is used to define fields on response body types.
type GameserverTemplateResponse struct {
	// The Fleets ObjectMeta
	ObjectMeta *ObjectMetaResponse `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// GameServerSpec
	GameServerSpec *GameServerSpecResponse `form:"GameServerSpec" json:"GameServerSpec" xml:"GameServerSpec"`
}

// GameServerSpecResponse is used to define fields on response body types.
type GameServerSpecResponse struct {
	// Portpolicy either dynamic or static
	PortPolicy string `form:"PortPolicy,omitempty" json:"PortPolicy,omitempty" xml:"PortPolicy,omitempty"`
	// Name of the gameserver-container
	ContainerName string `form:"ContainerName" json:"ContainerName" xml:"ContainerName"`
	// Image of the gameserver
	ContainerImage string `form:"ContainerImage" json:"ContainerImage" xml:"ContainerImage"`
	// Exposed port of the gameserver
	ContainerPort int32 `form:"ContainerPort" json:"ContainerPort" xml:"ContainerPort"`
}

// FleetStatusResponse is used to define fields on response body types.
type FleetStatusResponse struct {
	// Replicas
	Replicas int32 `form:"Replicas" json:"Replicas" xml:"Replicas"`
	// ReadyReplicas
	ReadyReplicas int32 `form:"ReadyReplicas" json:"ReadyReplicas" xml:"ReadyReplicas"`
	// AllocatedReplicas
	AllocatedReplicas int32 `form:"AllocatedReplicas" json:"AllocatedReplicas" xml:"AllocatedReplicas"`
}

// ObjectMetaResponseBody is used to define fields on response body types.
type ObjectMetaResponseBody struct {
	// Prefix for the generated fleetname
	GenerateName string `form:"GenerateName" json:"GenerateName" xml:"GenerateName"`
	// Namespace where the fleet will run in
	Namespace string `form:"Namespace" json:"Namespace" xml:"Namespace"`
}

// FleetSpecResponseBody is used to define fields on response body types.
type FleetSpecResponseBody struct {
	// Replicas
	Replicas int32 `form:"Replicas" json:"Replicas" xml:"Replicas"`
	// Template of the gameserver
	Template *GameserverTemplateResponseBody `form:"Template" json:"Template" xml:"Template"`
}

// GameserverTemplateResponseBody is used to define fields on response body
// types.
type GameserverTemplateResponseBody struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMetaResponseBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// GameServerSpec
	GameServerSpec *GameServerSpecResponseBody `form:"GameServerSpec" json:"GameServerSpec" xml:"GameServerSpec"`
}

// GameServerSpecResponseBody is used to define fields on response body types.
type GameServerSpecResponseBody struct {
	// Portpolicy either dynamic or static
	PortPolicy string `form:"PortPolicy,omitempty" json:"PortPolicy,omitempty" xml:"PortPolicy,omitempty"`
	// Name of the gameserver-container
	ContainerName string `form:"ContainerName" json:"ContainerName" xml:"ContainerName"`
	// Image of the gameserver
	ContainerImage string `form:"ContainerImage" json:"ContainerImage" xml:"ContainerImage"`
	// Exposed port of the gameserver
	ContainerPort int32 `form:"ContainerPort" json:"ContainerPort" xml:"ContainerPort"`
}

// ObjectMetaRequestBody is used to define fields on request body types.
type ObjectMetaRequestBody struct {
	// Prefix for the generated fleetname
	GenerateName *string `form:"GenerateName,omitempty" json:"GenerateName,omitempty" xml:"GenerateName,omitempty"`
	// Namespace where the fleet will run in
	Namespace *string `form:"Namespace,omitempty" json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

// FleetSpecRequestBody is used to define fields on request body types.
type FleetSpecRequestBody struct {
	// Replicas
	Replicas *int32 `form:"Replicas,omitempty" json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// Template of the gameserver
	Template *GameserverTemplateRequestBody `form:"Template,omitempty" json:"Template,omitempty" xml:"Template,omitempty"`
}

// GameserverTemplateRequestBody is used to define fields on request body types.
type GameserverTemplateRequestBody struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMetaRequestBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// GameServerSpec
	GameServerSpec *GameServerSpecRequestBody `form:"GameServerSpec,omitempty" json:"GameServerSpec,omitempty" xml:"GameServerSpec,omitempty"`
}

// GameServerSpecRequestBody is used to define fields on request body types.
type GameServerSpecRequestBody struct {
	// Portpolicy either dynamic or static
	PortPolicy *string `form:"PortPolicy,omitempty" json:"PortPolicy,omitempty" xml:"PortPolicy,omitempty"`
	// Name of the gameserver-container
	ContainerName *string `form:"ContainerName,omitempty" json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// Image of the gameserver
	ContainerImage *string `form:"ContainerImage,omitempty" json:"ContainerImage,omitempty" xml:"ContainerImage,omitempty"`
	// Exposed port of the gameserver
	ContainerPort *int32 `form:"ContainerPort,omitempty" json:"ContainerPort,omitempty" xml:"ContainerPort,omitempty"`
}

// NewStoredFleetResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "fleet" service.
func NewStoredFleetResponseCollection(res fleetviews.StoredFleetCollectionView) StoredFleetResponseCollection {
	body := make([]*StoredFleetResponse, len(res))
	for i, val := range res {
		body[i] = &StoredFleetResponse{
			Name: *val.Name,
		}
		if val.ObjectMeta != nil {
			body[i].ObjectMeta = marshalObjectMetaViewToObjectMetaResponse(val.ObjectMeta)
		}
		if val.FleetSpec != nil {
			body[i].FleetSpec = marshalFleetSpecViewToFleetSpecResponse(val.FleetSpec)
		}
		if val.FleetStatus != nil {
			body[i].FleetStatus = marshalFleetStatusViewToFleetStatusResponse(val.FleetStatus)
		}
	}
	return body
}

// NewConfigurationResponseBody builds the HTTP response body from the result
// of the "configuration" endpoint of the "fleet" service.
func NewConfigurationResponseBody(res *fleet.Fleet) *ConfigurationResponseBody {
	body := &ConfigurationResponseBody{}
	if res.ObjectMeta != nil {
		body.ObjectMeta = marshalObjectMetaToObjectMetaResponseBody(res.ObjectMeta)
	}
	if res.FleetSpec != nil {
		body.FleetSpec = marshalFleetSpecToFleetSpecResponseBody(res.FleetSpec)
	}
	return body
}

// NewCreateFleet builds a fleet service create endpoint payload.
func NewCreateFleet(body *CreateRequestBody) *fleet.Fleet {
	v := &fleet.Fleet{}
	if body.ObjectMeta != nil {
		v.ObjectMeta = unmarshalObjectMetaRequestBodyToObjectMeta(body.ObjectMeta)
	}
	v.FleetSpec = unmarshalFleetSpecRequestBodyToFleetSpec(body.FleetSpec)
	return v
}

// NewDeletePayload builds a fleet service delete endpoint payload.
func NewDeletePayload(name string, namespace string) *fleet.DeletePayload {
	return &fleet.DeletePayload{
		Name:      name,
		Namespace: namespace,
	}
}

// NewPatchPayload builds a fleet service patch endpoint payload.
func NewPatchPayload(namespace string, name string, replicas *uint32) *fleet.PatchPayload {
	return &fleet.PatchPayload{
		Namespace: namespace,
		Name:      name,
		Replicas:  replicas,
	}
}

// NewListPayload builds a fleet service list endpoint payload.
func NewListPayload(namespace string, view *string) *fleet.ListPayload {
	return &fleet.ListPayload{
		Namespace: namespace,
		View:      view,
	}
}

// NewAllocatePayload builds a fleet service allocate endpoint payload.
func NewAllocatePayload(namespace string, fleet2 string, name string) *fleet.AllocatePayload {
	return &fleet.AllocatePayload{
		Namespace: namespace,
		Fleet:     fleet2,
		Name:      name,
	}
}

// NewConfigurePayload builds a fleet service configure endpoint payload.
func NewConfigurePayload(body *ConfigureRequestBody) *fleet.ConfigurePayload {
	v := &fleet.ConfigurePayload{
		NamePrefix:           *body.NamePrefix,
		ContainerImage:       *body.ContainerImage,
		ContainerName:        *body.ContainerName,
		ContainerPort:        *body.ContainerPort,
		GameserverNamePrefix: *body.GameserverNamePrefix,
		Namespace:            *body.Namespace,
		Replicas:             *body.Replicas,
	}
	return v
}

// Validate runs the validations defined on CreateRequestBody.
func (body *CreateRequestBody) Validate() (err error) {
	if body.FleetSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FleetSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FleetSpec != nil {
		if err2 := body.FleetSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ConfigureRequestBody.
func (body *ConfigureRequestBody) Validate() (err error) {
	if body.ContainerImage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerImage", "body"))
	}
	if body.ContainerName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerName", "body"))
	}
	if body.ContainerPort == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerPort", "body"))
	}
	if body.NamePrefix == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("NamePrefix", "body"))
	}
	if body.GameserverNamePrefix == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GameserverNamePrefix", "body"))
	}
	if body.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Namespace", "body"))
	}
	if body.Replicas == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Replicas", "body"))
	}
	return
}

// Validate runs the validations defined on StoredFleetResponse.
func (body *StoredFleetResponse) Validate() (err error) {
	if body.ObjectMeta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ObjectMeta", "body"))
	}
	if body.FleetSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FleetSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FleetSpec != nil {
		if err2 := body.FleetSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ObjectMetaResponse.
func (body *ObjectMetaResponse) Validate() (err error) {
	if utf8.RuneCountInString(body.GenerateName) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.GenerateName", body.GenerateName, utf8.RuneCountInString(body.GenerateName), 100, false))
	}
	if utf8.RuneCountInString(body.Namespace) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Namespace", body.Namespace, utf8.RuneCountInString(body.Namespace), 100, false))
	}
	return
}

// Validate runs the validations defined on FleetSpecResponse.
func (body *FleetSpecResponse) Validate() (err error) {
	if body.Template == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Template", "body"))
	}
	if body.Template != nil {
		if err2 := body.Template.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameserverTemplateResponse.
func (body *GameserverTemplateResponse) Validate() (err error) {
	if body.GameServerSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GameServerSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ObjectMetaResponseBody.
func (body *ObjectMetaResponseBody) Validate() (err error) {
	if utf8.RuneCountInString(body.GenerateName) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.GenerateName", body.GenerateName, utf8.RuneCountInString(body.GenerateName), 100, false))
	}
	if utf8.RuneCountInString(body.Namespace) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Namespace", body.Namespace, utf8.RuneCountInString(body.Namespace), 100, false))
	}
	return
}

// Validate runs the validations defined on FleetSpecResponseBody.
func (body *FleetSpecResponseBody) Validate() (err error) {
	if body.Template == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Template", "body"))
	}
	if body.Template != nil {
		if err2 := body.Template.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameserverTemplateResponseBody.
func (body *GameserverTemplateResponseBody) Validate() (err error) {
	if body.GameServerSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GameServerSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ObjectMetaRequestBody.
func (body *ObjectMetaRequestBody) Validate() (err error) {
	if body.GenerateName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GenerateName", "body"))
	}
	if body.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Namespace", "body"))
	}
	if body.GenerateName != nil {
		if utf8.RuneCountInString(*body.GenerateName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.GenerateName", *body.GenerateName, utf8.RuneCountInString(*body.GenerateName), 100, false))
		}
	}
	if body.Namespace != nil {
		if utf8.RuneCountInString(*body.Namespace) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Namespace", *body.Namespace, utf8.RuneCountInString(*body.Namespace), 100, false))
		}
	}
	return
}

// Validate runs the validations defined on FleetSpecRequestBody.
func (body *FleetSpecRequestBody) Validate() (err error) {
	if body.Replicas == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Replicas", "body"))
	}
	if body.Template == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Template", "body"))
	}
	if body.Template != nil {
		if err2 := body.Template.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameserverTemplateRequestBody.
func (body *GameserverTemplateRequestBody) Validate() (err error) {
	if body.GameServerSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GameServerSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.GameServerSpec != nil {
		if err2 := body.GameServerSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameServerSpecRequestBody.
func (body *GameServerSpecRequestBody) Validate() (err error) {
	if body.ContainerImage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerImage", "body"))
	}
	if body.ContainerName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerName", "body"))
	}
	if body.ContainerPort == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerPort", "body"))
	}
	return
}
