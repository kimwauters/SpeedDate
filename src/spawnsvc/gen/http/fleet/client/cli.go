// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// fleet HTTP client CLI support package
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package client

import (
	"encoding/json"
	"fmt"

	fleet "github.com/proepkes/speeddate/src/spawnsvc/gen/fleet"
	goa "goa.design/goa"
)

// BuildCreatePayload builds the payload for the fleet create endpoint from CLI
// flags.
func BuildCreatePayload(fleetCreateBody string) (*fleet.Fleet, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(fleetCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"FleetSpec\": {\n         \"Replicas\": 1259733314,\n         \"Template\": {\n            \"GameServerSpec\": {\n               \"ContainerImage\": \"gcr.io/agones-images/udp-server:0.4\",\n               \"ContainerName\": \"my-server\",\n               \"ContainerPort\": 7777,\n               \"PortPolicy\": \"dynamic\"\n            },\n            \"ObjectMeta\": {\n               \"GenerateName\": \"my-server\",\n               \"Namespace\": \"speeddate-system\"\n            }\n         }\n      },\n      \"ObjectMeta\": {\n         \"GenerateName\": \"my-server\",\n         \"Namespace\": \"speeddate-system\"\n      }\n   }'")
		}
		if body.FleetSpec == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("FleetSpec", "body"))
		}
		if body.ObjectMeta != nil {
			if err2 := body.ObjectMeta.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.FleetSpec != nil {
			if err2 := body.FleetSpec.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &fleet.Fleet{}
	if body.ObjectMeta != nil {
		v.ObjectMeta = marshalObjectMetaRequestBodyToObjectMeta(body.ObjectMeta)
	}
	if body.FleetSpec != nil {
		v.FleetSpec = marshalFleetSpecRequestBodyToFleetSpec(body.FleetSpec)
	}
	return v, nil
}

// BuildListPayload builds the payload for the fleet list endpoint from CLI
// flags.
func BuildListPayload(fleetListNamespace string) (*fleet.NamespacePayload, error) {
	var namespace *string
	{
		if fleetListNamespace != "" {
			namespace = &fleetListNamespace
		}
	}
	payload := &fleet.NamespacePayload{
		Namespace: namespace,
	}
	return payload, nil
}

// BuildConfigurePayload builds the payload for the fleet configure endpoint
// from CLI flags.
func BuildConfigurePayload(fleetConfigureBody string) (*fleet.GameserverTemplate, error) {
	var err error
	var body ConfigureRequestBody
	{
		err = json.Unmarshal([]byte(fleetConfigureBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"GameServerSpec\": {\n         \"ContainerImage\": \"gcr.io/agones-images/udp-server:0.4\",\n         \"ContainerName\": \"my-server\",\n         \"ContainerPort\": 7777,\n         \"PortPolicy\": \"dynamic\"\n      },\n      \"ObjectMeta\": {\n         \"GenerateName\": \"my-server\",\n         \"Namespace\": \"speeddate-system\"\n      }\n   }'")
		}
		if body.GameServerSpec == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("GameServerSpec", "body"))
		}
		if body.ObjectMeta != nil {
			if err2 := body.ObjectMeta.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &fleet.GameserverTemplate{}
	if body.ObjectMeta != nil {
		v.ObjectMeta = marshalObjectMetaRequestBodyToObjectMeta(body.ObjectMeta)
	}
	if body.GameServerSpec != nil {
		v.GameServerSpec = marshalGameServerSpecRequestBodyToGameServerSpec(body.GameServerSpec)
	}
	return v, nil
}
