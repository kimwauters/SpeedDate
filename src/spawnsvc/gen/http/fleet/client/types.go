// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// fleet HTTP client types
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package client

import (
	"unicode/utf8"

	fleet "github.com/proepkes/speeddate/src/spawnsvc/gen/fleet"
	goa "goa.design/goa"
)

// CreateRequestBody is the type of the "fleet" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Fleets ObjectMeta
	ObjectMeta *ObjectMetaRequestBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// FleetSpec
	FleetSpec *FleetSpecRequestBody `form:"FleetSpec" json:"FleetSpec" xml:"FleetSpec"`
}

// ConfigureRequestBody is the type of the "fleet" service "configure" endpoint
// HTTP request body.
type ConfigureRequestBody struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMetaRequestBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// GameServerSpec
	GameServerSpec *GameServerSpecRequestBody `form:"GameServerSpec" json:"GameServerSpec" xml:"GameServerSpec"`
}

// ListResponseBody is the type of the "fleet" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredFleetResponseBody

// ConfigurationResponseBody is the type of the "fleet" service "configuration"
// endpoint HTTP response body.
type ConfigurationResponseBody struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMetaResponseBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// GameServerSpec
	GameServerSpec *GameServerSpecResponseBody `form:"GameServerSpec,omitempty" json:"GameServerSpec,omitempty" xml:"GameServerSpec,omitempty"`
}

// ObjectMetaRequestBody is used to define fields on request body types.
type ObjectMetaRequestBody struct {
	// Prefix for the generated fleetname
	GenerateName string `form:"GenerateName" json:"GenerateName" xml:"GenerateName"`
	// Namespace where the fleet will run in
	Namespace string `form:"Namespace" json:"Namespace" xml:"Namespace"`
}

// FleetSpecRequestBody is used to define fields on request body types.
type FleetSpecRequestBody struct {
	// Replicas
	Replicas int32 `form:"Replicas" json:"Replicas" xml:"Replicas"`
	// Template of the gameserver
	Template *GameserverTemplateRequestBody `form:"Template" json:"Template" xml:"Template"`
}

// GameserverTemplateRequestBody is used to define fields on request body types.
type GameserverTemplateRequestBody struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMetaRequestBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// GameServerSpec
	GameServerSpec *GameServerSpecRequestBody `form:"GameServerSpec" json:"GameServerSpec" xml:"GameServerSpec"`
}

// GameServerSpecRequestBody is used to define fields on request body types.
type GameServerSpecRequestBody struct {
	// Portpolicy either dynamic or static
	PortPolicy string `form:"PortPolicy" json:"PortPolicy" xml:"PortPolicy"`
	// Name of the gameserver-container
	ContainerName string `form:"ContainerName" json:"ContainerName" xml:"ContainerName"`
	// Image of the gameserver
	ContainerImage string `form:"ContainerImage" json:"ContainerImage" xml:"ContainerImage"`
	// Exposed port of the gameserver
	ContainerPort int32 `form:"ContainerPort" json:"ContainerPort" xml:"ContainerPort"`
}

// StoredFleetResponseBody is used to define fields on response body types.
type StoredFleetResponseBody struct {
	// The Fleets ObjectMeta
	ObjectMeta *ObjectMetaResponseBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// The FleetSpec
	FleetSpec *FleetSpecResponseBody `form:"FleetSpec,omitempty" json:"FleetSpec,omitempty" xml:"FleetSpec,omitempty"`
	// The FleetStatus
	FleetStatus *FleetStatusResponseBody `form:"FleetStatus,omitempty" json:"FleetStatus,omitempty" xml:"FleetStatus,omitempty"`
}

// ObjectMetaResponseBody is used to define fields on response body types.
type ObjectMetaResponseBody struct {
	// Prefix for the generated fleetname
	GenerateName *string `form:"GenerateName,omitempty" json:"GenerateName,omitempty" xml:"GenerateName,omitempty"`
	// Namespace where the fleet will run in
	Namespace *string `form:"Namespace,omitempty" json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

// FleetSpecResponseBody is used to define fields on response body types.
type FleetSpecResponseBody struct {
	// Replicas
	Replicas *int32 `form:"Replicas,omitempty" json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// Template of the gameserver
	Template *GameserverTemplateResponseBody `form:"Template,omitempty" json:"Template,omitempty" xml:"Template,omitempty"`
}

// GameserverTemplateResponseBody is used to define fields on response body
// types.
type GameserverTemplateResponseBody struct {
	// GameserverTemplates ObjectMeta
	ObjectMeta *ObjectMetaResponseBody `form:"ObjectMeta,omitempty" json:"ObjectMeta,omitempty" xml:"ObjectMeta,omitempty"`
	// GameServerSpec
	GameServerSpec *GameServerSpecResponseBody `form:"GameServerSpec,omitempty" json:"GameServerSpec,omitempty" xml:"GameServerSpec,omitempty"`
}

// GameServerSpecResponseBody is used to define fields on response body types.
type GameServerSpecResponseBody struct {
	// Portpolicy either dynamic or static
	PortPolicy *string `form:"PortPolicy,omitempty" json:"PortPolicy,omitempty" xml:"PortPolicy,omitempty"`
	// Name of the gameserver-container
	ContainerName *string `form:"ContainerName,omitempty" json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// Image of the gameserver
	ContainerImage *string `form:"ContainerImage,omitempty" json:"ContainerImage,omitempty" xml:"ContainerImage,omitempty"`
	// Exposed port of the gameserver
	ContainerPort *int32 `form:"ContainerPort,omitempty" json:"ContainerPort,omitempty" xml:"ContainerPort,omitempty"`
}

// FleetStatusResponseBody is used to define fields on response body types.
type FleetStatusResponseBody struct {
	// Replicas
	Replicas *int32 `form:"Replicas,omitempty" json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// ReadyReplicas
	ReadyReplicas *int32 `form:"ReadyReplicas,omitempty" json:"ReadyReplicas,omitempty" xml:"ReadyReplicas,omitempty"`
	// AllocatedReplicas
	AllocatedReplicas *int32 `form:"AllocatedReplicas,omitempty" json:"AllocatedReplicas,omitempty" xml:"AllocatedReplicas,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "fleet" service.
func NewCreateRequestBody(p *fleet.Fleet) *CreateRequestBody {
	body := &CreateRequestBody{}
	if p.ObjectMeta != nil {
		body.ObjectMeta = marshalObjectMetaToObjectMetaRequestBody(p.ObjectMeta)
	}
	if p.FleetSpec != nil {
		body.FleetSpec = marshalFleetSpecToFleetSpecRequestBody(p.FleetSpec)
	}
	return body
}

// NewConfigureRequestBody builds the HTTP request body from the payload of the
// "configure" endpoint of the "fleet" service.
func NewConfigureRequestBody(p *fleet.GameserverTemplate) *ConfigureRequestBody {
	body := &ConfigureRequestBody{}
	if p.ObjectMeta != nil {
		body.ObjectMeta = marshalObjectMetaToObjectMetaRequestBody(p.ObjectMeta)
	}
	if p.GameServerSpec != nil {
		body.GameServerSpec = marshalGameServerSpecToGameServerSpecRequestBody(p.GameServerSpec)
	}
	return body
}

// NewListStoredFleetOK builds a "fleet" service "list" endpoint result from a
// HTTP "OK" response.
func NewListStoredFleetOK(body []*StoredFleetResponseBody) []*fleet.StoredFleet {
	v := make([]*fleet.StoredFleet, len(body))
	for i, val := range body {
		v[i] = &fleet.StoredFleet{}
		v[i].ObjectMeta = unmarshalObjectMetaResponseBodyToObjectMeta(val.ObjectMeta)
		v[i].FleetSpec = unmarshalFleetSpecResponseBodyToFleetSpec(val.FleetSpec)
		if val.FleetStatus != nil {
			v[i].FleetStatus = unmarshalFleetStatusResponseBodyToFleetStatus(val.FleetStatus)
		}
	}
	return v
}

// NewConfigurationGameserverTemplateOK builds a "fleet" service
// "configuration" endpoint result from a HTTP "OK" response.
func NewConfigurationGameserverTemplateOK(body *ConfigurationResponseBody) *fleet.GameserverTemplate {
	v := &fleet.GameserverTemplate{}
	if body.ObjectMeta != nil {
		v.ObjectMeta = unmarshalObjectMetaResponseBodyToObjectMeta(body.ObjectMeta)
	}
	v.GameServerSpec = unmarshalGameServerSpecResponseBodyToGameServerSpec(body.GameServerSpec)
	return v
}

// Validate runs the validations defined on ConfigurationResponseBody
func (body *ConfigurationResponseBody) Validate() (err error) {
	if body.GameServerSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GameServerSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.GameServerSpec != nil {
		if err2 := body.GameServerSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ObjectMetaRequestBody
func (body *ObjectMetaRequestBody) Validate() (err error) {
	if utf8.RuneCountInString(body.GenerateName) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.GenerateName", body.GenerateName, utf8.RuneCountInString(body.GenerateName), 100, false))
	}
	if utf8.RuneCountInString(body.Namespace) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Namespace", body.Namespace, utf8.RuneCountInString(body.Namespace), 100, false))
	}
	return
}

// Validate runs the validations defined on FleetSpecRequestBody
func (body *FleetSpecRequestBody) Validate() (err error) {
	if body.Template == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Template", "body"))
	}
	if body.Template != nil {
		if err2 := body.Template.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameserverTemplateRequestBody
func (body *GameserverTemplateRequestBody) Validate() (err error) {
	if body.GameServerSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GameServerSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on StoredFleetResponseBody
func (body *StoredFleetResponseBody) Validate() (err error) {
	if body.ObjectMeta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ObjectMeta", "body"))
	}
	if body.FleetSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FleetSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FleetSpec != nil {
		if err2 := body.FleetSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FleetStatus != nil {
		if err2 := body.FleetStatus.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on ObjectMetaResponseBody
func (body *ObjectMetaResponseBody) Validate() (err error) {
	if body.GenerateName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GenerateName", "body"))
	}
	if body.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Namespace", "body"))
	}
	if body.GenerateName != nil {
		if utf8.RuneCountInString(*body.GenerateName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.GenerateName", *body.GenerateName, utf8.RuneCountInString(*body.GenerateName), 100, false))
		}
	}
	if body.Namespace != nil {
		if utf8.RuneCountInString(*body.Namespace) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Namespace", *body.Namespace, utf8.RuneCountInString(*body.Namespace), 100, false))
		}
	}
	return
}

// Validate runs the validations defined on FleetSpecResponseBody
func (body *FleetSpecResponseBody) Validate() (err error) {
	if body.Replicas == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Replicas", "body"))
	}
	if body.Template == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Template", "body"))
	}
	if body.Template != nil {
		if err2 := body.Template.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameserverTemplateResponseBody
func (body *GameserverTemplateResponseBody) Validate() (err error) {
	if body.GameServerSpec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("GameServerSpec", "body"))
	}
	if body.ObjectMeta != nil {
		if err2 := body.ObjectMeta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.GameServerSpec != nil {
		if err2 := body.GameServerSpec.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on GameServerSpecResponseBody
func (body *GameServerSpecResponseBody) Validate() (err error) {
	if body.PortPolicy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("PortPolicy", "body"))
	}
	if body.ContainerImage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerImage", "body"))
	}
	if body.ContainerName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerName", "body"))
	}
	if body.ContainerPort == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ContainerPort", "body"))
	}
	return
}

// Validate runs the validations defined on FleetStatusResponseBody
func (body *FleetStatusResponseBody) Validate() (err error) {
	if body.Replicas == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Replicas", "body"))
	}
	if body.ReadyReplicas == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReadyReplicas", "body"))
	}
	if body.AllocatedReplicas == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("AllocatedReplicas", "body"))
	}
	return
}
