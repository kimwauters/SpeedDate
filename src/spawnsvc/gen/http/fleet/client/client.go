// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// fleet client HTTP transport
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package client

import (
	"context"
	"net/http"

	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// Client lists the fleet service endpoint HTTP clients.
type Client struct {
	// Create Doer is the HTTP client used to make requests to the create endpoint.
	CreateDoer goahttp.Doer

	// Delete Doer is the HTTP client used to make requests to the delete endpoint.
	DeleteDoer goahttp.Doer

	// Patch Doer is the HTTP client used to make requests to the patch endpoint.
	PatchDoer goahttp.Doer

	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// Allocate Doer is the HTTP client used to make requests to the allocate
	// endpoint.
	AllocateDoer goahttp.Doer

	// Configuration Doer is the HTTP client used to make requests to the
	// configuration endpoint.
	ConfigurationDoer goahttp.Doer

	// Configure Doer is the HTTP client used to make requests to the configure
	// endpoint.
	ConfigureDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the fleet service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateDoer:          doer,
		DeleteDoer:          doer,
		PatchDoer:           doer,
		ListDoer:            doer,
		AllocateDoer:        doer,
		ConfigurationDoer:   doer,
		ConfigureDoer:       doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Create returns an endpoint that makes HTTP requests to the fleet service
// create server.
func (c *Client) Create() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateRequest(c.encoder)
		decodeResponse = DecodeCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("fleet", "create", err)
		}
		return decodeResponse(resp)
	}
}

// Delete returns an endpoint that makes HTTP requests to the fleet service
// delete server.
func (c *Client) Delete() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRequest(c.encoder)
		decodeResponse = DecodeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("fleet", "delete", err)
		}
		return decodeResponse(resp)
	}
}

// Patch returns an endpoint that makes HTTP requests to the fleet service
// patch server.
func (c *Client) Patch() goa.Endpoint {
	var (
		encodeRequest  = EncodePatchRequest(c.encoder)
		decodeResponse = DecodePatchResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPatchRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PatchDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("fleet", "patch", err)
		}
		return decodeResponse(resp)
	}
}

// List returns an endpoint that makes HTTP requests to the fleet service list
// server.
func (c *Client) List() goa.Endpoint {
	var (
		encodeRequest  = EncodeListRequest(c.encoder)
		decodeResponse = DecodeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("fleet", "list", err)
		}
		return decodeResponse(resp)
	}
}

// Allocate returns an endpoint that makes HTTP requests to the fleet service
// allocate server.
func (c *Client) Allocate() goa.Endpoint {
	var (
		encodeRequest  = EncodeAllocateRequest(c.encoder)
		decodeResponse = DecodeAllocateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAllocateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AllocateDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("fleet", "allocate", err)
		}
		return decodeResponse(resp)
	}
}

// Configuration returns an endpoint that makes HTTP requests to the fleet
// service configuration server.
func (c *Client) Configuration() goa.Endpoint {
	var (
		decodeResponse = DecodeConfigurationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildConfigurationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ConfigurationDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("fleet", "configuration", err)
		}
		return decodeResponse(resp)
	}
}

// Configure returns an endpoint that makes HTTP requests to the fleet service
// configure server.
func (c *Client) Configure() goa.Endpoint {
	var (
		encodeRequest  = EncodeConfigureRequest(c.encoder)
		decodeResponse = DecodeConfigureResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildConfigureRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ConfigureDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("fleet", "configure", err)
		}
		return decodeResponse(resp)
	}
}
