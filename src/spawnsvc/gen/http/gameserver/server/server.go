// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// gameserver HTTP server
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package server

import (
	"context"
	"net/http"

	gameserver "github.com/proepkes/speeddate/src/spawnsvc/gen/gameserver"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
	"goa.design/plugins/cors"
)

// Server lists the gameserver service endpoint HTTP handlers.
type Server struct {
	Mounts    []*MountPoint
	Configure http.Handler
	CORS      http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the gameserver service endpoints.
func New(
	e *gameserver.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Configure", "POST", "/gameserver/configure"},
			{"CORS", "OPTIONS", "/gameserver/configure"},
		},
		Configure: NewConfigureHandler(e.Configure, mux, dec, enc, eh),
		CORS:      NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "gameserver" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Configure = m(s.Configure)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the gameserver endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountConfigureHandler(mux, h.Configure)
	MountCORSHandler(mux, h.CORS)
}

// MountConfigureHandler configures the mux to serve the "gameserver" service
// "configure" endpoint.
func MountConfigureHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleGameserverOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/gameserver/configure", f)
}

// NewConfigureHandler creates a HTTP handler which loads the HTTP request and
// calls the "gameserver" service "configure" endpoint.
func NewConfigureHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeConfigureResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "configure")
		ctx = context.WithValue(ctx, goa.ServiceKey, "gameserver")

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service gameserver.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleGameserverOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/gameserver/configure", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleGameserverOrigin applies the CORS response headers corresponding to
// the origin for the service gameserver.
func handleGameserverOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
