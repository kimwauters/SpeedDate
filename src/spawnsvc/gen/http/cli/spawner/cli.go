// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// spawner HTTP client CLI support package
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	fleetc "github.com/proepkes/speeddate/src/spawnsvc/gen/http/fleet/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `fleet (add|clear|configure)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` fleet add` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		fleetFlags = flag.NewFlagSet("fleet", flag.ContinueOnError)

		fleetAddFlags = flag.NewFlagSet("add", flag.ExitOnError)

		fleetClearFlags = flag.NewFlagSet("clear", flag.ExitOnError)

		fleetConfigureFlags = flag.NewFlagSet("configure", flag.ExitOnError)
	)
	fleetFlags.Usage = fleetUsage
	fleetAddFlags.Usage = fleetAddUsage
	fleetClearFlags.Usage = fleetClearUsage
	fleetConfigureFlags.Usage = fleetConfigureUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "fleet":
			svcf = fleetFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "fleet":
			switch epn {
			case "add":
				epf = fleetAddFlags

			case "clear":
				epf = fleetClearFlags

			case "configure":
				epf = fleetConfigureFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "fleet":
			c := fleetc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data = nil
			case "clear":
				endpoint = c.Clear()
				data = nil
			case "configure":
				endpoint = c.Configure()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// fleetUsage displays the usage of the fleet command and its subcommands.
func fleetUsage() {
	fmt.Fprintf(os.Stderr, `The service makes it possible to manage gameservers
Usage:
    %s [globalflags] fleet COMMAND [flags]

COMMAND:
    add: Add a new gameserver.
    clear: Removes all gameserver pods.
    configure: Configure gameserver-properties.

Additional help:
    %s fleet COMMAND --help
`, os.Args[0], os.Args[0])
}
func fleetAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet add

Add a new gameserver.

Example:
    `+os.Args[0]+` fleet add
`, os.Args[0])
}

func fleetClearUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet clear

Removes all gameserver pods.

Example:
    `+os.Args[0]+` fleet clear
`, os.Args[0])
}

func fleetConfigureUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet configure

Configure gameserver-properties.

Example:
    `+os.Args[0]+` fleet configure
`, os.Args[0])
}
