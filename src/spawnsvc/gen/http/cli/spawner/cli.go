// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// spawner HTTP client CLI support package
//
// Command:
// $ goa gen github.com/proepkes/speeddate/src/spawnsvc/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	fleetc "github.com/proepkes/speeddate/src/spawnsvc/gen/http/fleet/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `fleet (create|delete|patch|list|allocate|configuration|configure)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` fleet create --body '{
      "FleetSpec": {
         "Replicas": 737777790,
         "Template": {
            "GameServerSpec": {
               "ContainerImage": "gcr.io/agones-images/udp-server:0.4",
               "ContainerName": "my-server",
               "ContainerPort": 7777,
               "PortPolicy": "dynamic"
            },
            "ObjectMeta": {
               "GenerateName": "my-server",
               "Namespace": "speeddate-system"
            }
         }
      },
      "ObjectMeta": {
         "GenerateName": "my-server",
         "Namespace": "speeddate-system"
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		fleetFlags = flag.NewFlagSet("fleet", flag.ContinueOnError)

		fleetCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		fleetCreateBodyFlag = fleetCreateFlags.String("body", "REQUIRED", "")

		fleetDeleteFlags         = flag.NewFlagSet("delete", flag.ExitOnError)
		fleetDeleteNameFlag      = fleetDeleteFlags.String("name", "REQUIRED", "Name of the fleet")
		fleetDeleteNamespaceFlag = fleetDeleteFlags.String("namespace", "", "")

		fleetPatchFlags         = flag.NewFlagSet("patch", flag.ExitOnError)
		fleetPatchNamespaceFlag = fleetPatchFlags.String("namespace", "", "")
		fleetPatchNameFlag      = fleetPatchFlags.String("name", "REQUIRED", "")
		fleetPatchReplicasFlag  = fleetPatchFlags.String("replicas", "", "")

		fleetListFlags         = flag.NewFlagSet("list", flag.ExitOnError)
		fleetListNamespaceFlag = fleetListFlags.String("namespace", "", "")
		fleetListViewFlag      = fleetListFlags.String("view", "", "")

		fleetAllocateFlags         = flag.NewFlagSet("allocate", flag.ExitOnError)
		fleetAllocateNamespaceFlag = fleetAllocateFlags.String("namespace", "", "")
		fleetAllocateFleet2Flag    = fleetAllocateFlags.String("fleet2", "REQUIRED", "")
		fleetAllocateNameFlag      = fleetAllocateFlags.String("name", "REQUIRED", "")

		fleetConfigurationFlags = flag.NewFlagSet("configuration", flag.ExitOnError)

		fleetConfigureFlags    = flag.NewFlagSet("configure", flag.ExitOnError)
		fleetConfigureBodyFlag = fleetConfigureFlags.String("body", "REQUIRED", "")
	)
	fleetFlags.Usage = fleetUsage
	fleetCreateFlags.Usage = fleetCreateUsage
	fleetDeleteFlags.Usage = fleetDeleteUsage
	fleetPatchFlags.Usage = fleetPatchUsage
	fleetListFlags.Usage = fleetListUsage
	fleetAllocateFlags.Usage = fleetAllocateUsage
	fleetConfigurationFlags.Usage = fleetConfigurationUsage
	fleetConfigureFlags.Usage = fleetConfigureUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "fleet":
			svcf = fleetFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "fleet":
			switch epn {
			case "create":
				epf = fleetCreateFlags

			case "delete":
				epf = fleetDeleteFlags

			case "patch":
				epf = fleetPatchFlags

			case "list":
				epf = fleetListFlags

			case "allocate":
				epf = fleetAllocateFlags

			case "configuration":
				epf = fleetConfigurationFlags

			case "configure":
				epf = fleetConfigureFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "fleet":
			c := fleetc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = fleetc.BuildCreatePayload(*fleetCreateBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = fleetc.BuildDeletePayload(*fleetDeleteNameFlag, *fleetDeleteNamespaceFlag)
			case "patch":
				endpoint = c.Patch()
				data, err = fleetc.BuildPatchPayload(*fleetPatchNamespaceFlag, *fleetPatchNameFlag, *fleetPatchReplicasFlag)
			case "list":
				endpoint = c.List()
				data, err = fleetc.BuildListPayload(*fleetListNamespaceFlag, *fleetListViewFlag)
			case "allocate":
				endpoint = c.Allocate()
				data, err = fleetc.BuildAllocatePayload(*fleetAllocateNamespaceFlag, *fleetAllocateFleet2Flag, *fleetAllocateNameFlag)
			case "configuration":
				endpoint = c.Configuration()
				data = nil
			case "configure":
				endpoint = c.Configure()
				data, err = fleetc.BuildConfigurePayload(*fleetConfigureBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// fleetUsage displays the usage of the fleet command and its subcommands.
func fleetUsage() {
	fmt.Fprintf(os.Stderr, `The service makes it possible to manage gameservers
Usage:
    %s [globalflags] fleet COMMAND [flags]

COMMAND:
    create: Create a new fleet.
    delete: Delete a fleet
    patch: Patch a fleet.
    list: List all fleets.
    allocate: Create a fleetallocation.
    configuration: Get default fleet configuration.
    configure: Configure default fleet options.

Additional help:
    %s fleet COMMAND --help
`, os.Args[0], os.Args[0])
}
func fleetCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet create -body JSON

Create a new fleet.
    -body JSON: 

Example:
    `+os.Args[0]+` fleet create --body '{
      "FleetSpec": {
         "Replicas": 737777790,
         "Template": {
            "GameServerSpec": {
               "ContainerImage": "gcr.io/agones-images/udp-server:0.4",
               "ContainerName": "my-server",
               "ContainerPort": 7777,
               "PortPolicy": "dynamic"
            },
            "ObjectMeta": {
               "GenerateName": "my-server",
               "Namespace": "speeddate-system"
            }
         }
      },
      "ObjectMeta": {
         "GenerateName": "my-server",
         "Namespace": "speeddate-system"
      }
   }'
`, os.Args[0])
}

func fleetDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet delete -name STRING -namespace STRING

Delete a fleet
    -name STRING: Name of the fleet
    -namespace STRING: 

Example:
    `+os.Args[0]+` fleet delete --name "Consequuntur voluptas dolores ea quae expedita." --namespace "Non id voluptatem facilis."
`, os.Args[0])
}

func fleetPatchUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet patch -namespace STRING -name STRING -replicas UINT32

Patch a fleet.
    -namespace STRING: 
    -name STRING: 
    -replicas UINT32: 

Example:
    `+os.Args[0]+` fleet patch --namespace "Quis fugit consequatur et est delectus." --name "Tempore sunt ad ut ut quam quia." --replicas 1277160663
`, os.Args[0])
}

func fleetListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet list -namespace STRING -view STRING

List all fleets.
    -namespace STRING: 
    -view STRING: 

Example:
    `+os.Args[0]+` fleet list --namespace "Aut repellat quidem dolore illum laboriosam praesentium." --view "default"
`, os.Args[0])
}

func fleetAllocateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet allocate -namespace STRING -fleet2 STRING -name STRING

Create a fleetallocation.
    -namespace STRING: 
    -fleet2 STRING: 
    -name STRING: 

Example:
    `+os.Args[0]+` fleet allocate --namespace "Praesentium doloremque voluptatem eos impedit saepe." --fleet2 "Inventore recusandae velit ad." --name "Deleniti quo recusandae."
`, os.Args[0])
}

func fleetConfigurationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet configuration

Get default fleet configuration.

Example:
    `+os.Args[0]+` fleet configuration
`, os.Args[0])
}

func fleetConfigureUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fleet configure -body JSON

Configure default fleet options.
    -body JSON: 

Example:
    `+os.Args[0]+` fleet configure --body '{
      "ContainerImage": "Sit laudantium aut quod perferendis neque quis.",
      "ContainerName": "Quisquam minima quidem dolore sint voluptatibus molestias.",
      "ContainerPort": 69570132,
      "GameserverNamePrefix": "Alias quas omnis qui harum ad.",
      "NamePrefix": "Sunt enim.",
      "Namespace": "Aut quia est a nam quia optio.",
      "Replicas": 1600223366
   }'
`, os.Args[0])
}
