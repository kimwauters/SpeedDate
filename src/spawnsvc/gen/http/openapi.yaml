swagger: "2.0"
info:
  title: Speeddate Spawnerservice
  description: HTTP service for managing game-instances
  version: ""
host: :8001
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /fleet/add:
    post:
      tags:
      - fleet
      summary: add fleet
      description: Add a new gameserver.
      operationId: fleet#add
      responses:
        "201":
          description: Created response.
          schema:
            type: string
      schemes:
      - http
  /fleet/clear:
    post:
      tags:
      - fleet
      summary: clear fleet
      description: Removes all gameserver pods.
      operationId: fleet#clear
      responses:
        "200":
          description: OK response.
          schema:
            type: string
      schemes:
      - http
  /fleet/configuration:
    get:
      tags:
      - fleet
      summary: configuration fleet
      description: Get gameserver deployment configuration.
      operationId: fleet#configuration
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ConfigurationResponseBody'
            required:
            - GameServerSpec
      schemes:
      - http
  /fleet/configure:
    post:
      tags:
      - fleet
      summary: configure fleet
      description: Configure gameserver deployment.
      operationId: fleet#configure
      parameters:
      - name: ConfigureRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/FleetConfigureRequestBody'
          required:
          - GameServerSpec
      responses:
        "200":
          description: OK response.
          schema:
            type: string
      schemes:
      - http
  /fleet/create:
    post:
      tags:
      - fleet
      summary: create fleet
      description: Create a new fleet.
      operationId: fleet#create
      parameters:
      - name: CreateRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/FleetCreateRequestBody'
          required:
          - FleetSpec
      responses:
        "201":
          description: Created response.
          schema:
            type: string
      schemes:
      - http
  /fleet/list:
    get:
      tags:
      - fleet
      summary: list fleet
      description: List all fleets.
      operationId: fleet#list
      parameters:
      - name: namespace
        in: query
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            type: array
            items:
              $ref: '#/definitions/StoredFleetResponseBody'
      schemes:
      - http
  /swagger/swagger.json:
    get:
      summary: Download ../../gen/http/openapi.json
      description: JSON document containing the API swagger definition
      operationId: swagger#/swagger/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
definitions:
  ConfigurationResponseBody:
    title: ConfigurationResponseBody
    type: object
    properties:
      GameServerSpec:
        $ref: '#/definitions/GameServerSpecResponseBody'
      ObjectMeta:
        $ref: '#/definitions/ObjectMetaResponseBody'
    example:
      GameServerSpec:
        ContainerImage: gcr.io/agones-images/udp-server:0.4
        ContainerName: my-server
        ContainerPort: 7777
        PortPolicy: dynamic
      ObjectMeta:
        GenerateName: my-server
        Namespace: speeddate-system
    required:
    - GameServerSpec
  FleetConfigureRequestBody:
    title: FleetConfigureRequestBody
    type: object
    properties:
      GameServerSpec:
        $ref: '#/definitions/GameServerSpecRequestBody'
      ObjectMeta:
        $ref: '#/definitions/ObjectMetaRequestBody'
    example:
      GameServerSpec:
        ContainerImage: gcr.io/agones-images/udp-server:0.4
        ContainerName: my-server
        ContainerPort: 7777
        PortPolicy: dynamic
      ObjectMeta:
        GenerateName: my-server
        Namespace: speeddate-system
    required:
    - GameServerSpec
  FleetCreateRequestBody:
    title: FleetCreateRequestBody
    type: object
    properties:
      FleetSpec:
        $ref: '#/definitions/FleetSpecRequestBody'
      ObjectMeta:
        $ref: '#/definitions/ObjectMetaRequestBody'
    example:
      FleetSpec:
        Replicas: 1259733314
        Template:
          GameServerSpec:
            ContainerImage: gcr.io/agones-images/udp-server:0.4
            ContainerName: my-server
            ContainerPort: 7777
            PortPolicy: dynamic
          ObjectMeta:
            GenerateName: my-server
            Namespace: speeddate-system
      ObjectMeta:
        GenerateName: my-server
        Namespace: speeddate-system
    required:
    - FleetSpec
  FleetSpecRequestBody:
    title: FleetSpecRequestBody
    type: object
    properties:
      Replicas:
        type: integer
        description: Replicas
        example: 719466351
        format: int32
      Template:
        $ref: '#/definitions/GameserverTemplateRequestBody'
    description: Spec for Fleet
    example:
      Replicas: 1388378496
      Template:
        GameServerSpec:
          ContainerImage: gcr.io/agones-images/udp-server:0.4
          ContainerName: my-server
          ContainerPort: 7777
          PortPolicy: dynamic
        ObjectMeta:
          GenerateName: my-server
          Namespace: speeddate-system
    required:
    - Replicas
    - Template
  FleetSpecResponseBody:
    title: FleetSpecResponseBody
    type: object
    properties:
      Replicas:
        type: integer
        description: Replicas
        example: 489130780
        format: int32
      Template:
        $ref: '#/definitions/GameserverTemplateResponseBody'
    description: Spec for Fleet
    example:
      Replicas: 1692393294
      Template:
        GameServerSpec:
          ContainerImage: gcr.io/agones-images/udp-server:0.4
          ContainerName: my-server
          ContainerPort: 7777
          PortPolicy: dynamic
        ObjectMeta:
          GenerateName: my-server
          Namespace: speeddate-system
    required:
    - Replicas
    - Template
  FleetStatusResponseBody:
    title: FleetStatusResponseBody
    type: object
    properties:
      AllocatedReplicas:
        type: integer
        description: AllocatedReplicas
        example: 957503257
        format: int32
      ReadyReplicas:
        type: integer
        description: ReadyReplicas
        example: 2024018296
        format: int32
      Replicas:
        type: integer
        description: Replicas
        example: 729387113
        format: int32
    example:
      AllocatedReplicas: 1306014564
      ReadyReplicas: 2121033329
      Replicas: 453430146
    required:
    - Replicas
    - ReadyReplicas
    - AllocatedReplicas
  GameServerSpecRequestBody:
    title: GameServerSpecRequestBody
    type: object
    properties:
      ContainerImage:
        type: string
        description: Image of the gameserver
        example: gcr.io/agones-images/udp-server:0.4
      ContainerName:
        type: string
        description: Name of the gameserver-container
        example: my-server
      ContainerPort:
        type: integer
        description: Exposed port of the gameserver
        example: 7777
        format: int32
      PortPolicy:
        type: string
        description: Portpolicy either dynamic or static
        example: dynamic
    description: GameserverTemplate describes gameserver
    example:
      ContainerImage: gcr.io/agones-images/udp-server:0.4
      ContainerName: my-server
      ContainerPort: 7777
      PortPolicy: dynamic
    required:
    - PortPolicy
    - ContainerImage
    - ContainerName
    - ContainerPort
  GameServerSpecResponseBody:
    title: GameServerSpecResponseBody
    type: object
    properties:
      ContainerImage:
        type: string
        description: Image of the gameserver
        example: gcr.io/agones-images/udp-server:0.4
      ContainerName:
        type: string
        description: Name of the gameserver-container
        example: my-server
      ContainerPort:
        type: integer
        description: Exposed port of the gameserver
        example: 7777
        format: int32
      PortPolicy:
        type: string
        description: Portpolicy either dynamic or static
        example: dynamic
    description: GameserverTemplate describes gameserver
    example:
      ContainerImage: gcr.io/agones-images/udp-server:0.4
      ContainerName: my-server
      ContainerPort: 7777
      PortPolicy: dynamic
    required:
    - PortPolicy
    - ContainerImage
    - ContainerName
    - ContainerPort
  GameserverTemplateRequestBody:
    title: GameserverTemplateRequestBody
    type: object
    properties:
      GameServerSpec:
        $ref: '#/definitions/GameServerSpecRequestBody'
      ObjectMeta:
        $ref: '#/definitions/ObjectMetaRequestBody'
    description: GameserverTemplate describes gameserver
    example:
      GameServerSpec:
        ContainerImage: gcr.io/agones-images/udp-server:0.4
        ContainerName: my-server
        ContainerPort: 7777
        PortPolicy: dynamic
      ObjectMeta:
        GenerateName: my-server
        Namespace: speeddate-system
    required:
    - GameServerSpec
  GameserverTemplateResponseBody:
    title: GameserverTemplateResponseBody
    type: object
    properties:
      GameServerSpec:
        $ref: '#/definitions/GameServerSpecResponseBody'
      ObjectMeta:
        $ref: '#/definitions/ObjectMetaResponseBody'
    description: GameserverTemplate describes gameserver
    example:
      GameServerSpec:
        ContainerImage: gcr.io/agones-images/udp-server:0.4
        ContainerName: my-server
        ContainerPort: 7777
        PortPolicy: dynamic
      ObjectMeta:
        GenerateName: my-server
        Namespace: speeddate-system
    required:
    - GameServerSpec
  ObjectMetaRequestBody:
    title: ObjectMetaRequestBody
    type: object
    properties:
      GenerateName:
        type: string
        description: Prefix for the generated fleetname
        example: my-server
        maxLength: 100
      Namespace:
        type: string
        description: Namespace where the fleet will run in
        example: speeddate-system
        maxLength: 100
    description: Spec for ObjectMeta
    example:
      GenerateName: my-server
      Namespace: speeddate-system
    required:
    - GenerateName
    - Namespace
  ObjectMetaResponseBody:
    title: ObjectMetaResponseBody
    type: object
    properties:
      GenerateName:
        type: string
        description: Prefix for the generated fleetname
        example: my-server
        maxLength: 100
      Namespace:
        type: string
        description: Namespace where the fleet will run in
        example: speeddate-system
        maxLength: 100
    description: Spec for ObjectMeta
    example:
      GenerateName: my-server
      Namespace: speeddate-system
    required:
    - GenerateName
    - Namespace
  StoredFleetResponseBody:
    title: StoredFleetResponseBody
    type: object
    properties:
      FleetSpec:
        $ref: '#/definitions/FleetSpecResponseBody'
      FleetStatus:
        $ref: '#/definitions/FleetStatusResponseBody'
      ObjectMeta:
        $ref: '#/definitions/ObjectMetaResponseBody'
    description: Fleet
    example:
      FleetSpec:
        Replicas: 930171550
        Template:
          GameServerSpec:
            ContainerImage: gcr.io/agones-images/udp-server:0.4
            ContainerName: my-server
            ContainerPort: 7777
            PortPolicy: dynamic
          ObjectMeta:
            GenerateName: my-server
            Namespace: speeddate-system
      FleetStatus:
        AllocatedReplicas: 1235898119
        ReadyReplicas: 1750989377
        Replicas: 807835315
      ObjectMeta:
        GenerateName: my-server
        Namespace: speeddate-system
    required:
    - ObjectMeta
    - FleetSpec
securityDefinitions:
  jwt:
    type: apiKey
    description: |-
      Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".
      **Security Scopes**:
        * `api:read`: Read-only access
        * `api:write`: Read and write access
    name: Authorization
    in: header
