// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// authorize HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/proepkes/speeddate/authsvc/design

package server

import (
	"context"
	"net/http"

	authorize "github.com/proepkes/speeddate/authsvc/gen/authorize"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// EncodeLoginResponse returns an encoder for responses returned by the
// authorize login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*authorize.LoginResult)
		w.Header().Set("Authorization", res.Auth)
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeLoginRequest returns a decoder for requests sent to the authorize
// login endpoint.
func DecodeLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		payload := NewLoginPayload()
		user, pass, ok := r.BasicAuth()
		if !ok {
			return nil, goa.MissingFieldError("Authorization", "header")
		}
		payload.Username = user
		payload.Password = pass

		return payload, nil
	}
}
