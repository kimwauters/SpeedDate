swagger: "2.0"
info:
  title: Speeddate Userservice
  description: HTTP service for managing users in the SpeedDate-system
  version: ""
host: :8001
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /swagger/swagger.json:
    get:
      summary: Download ../../gen/http/openapi.json
      description: JSON document containing the API swagger definition
      operationId: swagger#/swagger/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
  /user/delete/{id}:
    delete:
      tags:
      - repository
      summary: delete repository
      description: Remove user from storage
      operationId: repository#delete
      parameters:
      - name: id
        in: path
        description: ID of user to remove
        required: true
        type: string
      responses:
        "204":
          description: No Content response.
      schemes:
      - http
  /user/get/{id}:
    get:
      tags:
      - repository
      summary: get repository
      description: |2-

        Required security scopes:
          * `api:read`
      operationId: repository#get
      parameters:
      - name: view
        in: query
        description: View to render
        required: false
        type: string
        enum:
        - default
        - tiny
      - name: id
        in: path
        description: Get user by ID
        required: true
        type: string
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/RepositoryGetResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/RepositoryGetUnauthorizedResponseBody'
        "404":
          description: Not Found response.
          schema:
            $ref: '#/definitions/RepositoryGetNotFoundResponseBody'
      schemes:
      - http
      security:
      - jwt: []
  /user/insert:
    post:
      tags:
      - repository
      summary: insert repository
      description: Add new user and return its ID.
      operationId: repository#insert
      parameters:
      - name: InsertRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/RepositoryInsertRequestBody'
          required:
          - name
      responses:
        "201":
          description: Created response.
          schema:
            type: string
      schemes:
      - http
definitions:
  RepositoryGetNotFoundResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: false
    description: GetNotFoundResponseBody result type (default view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  RepositoryGetResponseBody:
    title: 'Mediatype identifier: application/sd.data.stored-user; view=default'
    type: object
    properties:
      id:
        type: string
        description: UUID is the unique id of the user.
        example: f923e008-e511-11e8-9f32-f2801f1b9fd1
      name:
        type: string
        description: The username
        example: 1fg
        maxLength: 50
      online:
        type: boolean
        description: Indicates whether the user is currently online.
        example: true
    description: GetResponseBody result type (default view)
    example:
      id: f923e008-e511-11e8-9f32-f2801f1b9fd1
      name: w0z
      online: true
    required:
    - id
    - name
  RepositoryGetUnauthorizedResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: false
    description: GetUnauthorizedResponseBody result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  RepositoryInsertRequestBody:
    title: RepositoryInsertRequestBody
    type: object
    properties:
      name:
        type: string
        description: The username
        example: wye
        maxLength: 50
    example:
      name: oyv
    required:
    - name
securityDefinitions:
  jwt:
    type: apiKey
    description: |-
      Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".
      **Security Scopes**:
        * `api:read`: Read-only access
        * `api:write`: Read and write access
    name: Authorization
    in: header
