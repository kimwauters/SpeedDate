// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// storager HTTP client CLI support package
//
// Command:
// $ goa gen github.com/proepkes/speeddate/storagesvc/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	authstoragec "github.com/proepkes/speeddate/storagesvc/gen/http/authstorage/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `authstorage (insert|delete|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` authstorage insert --body '{
      "name": "cbq"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		authstorageFlags = flag.NewFlagSet("authstorage", flag.ContinueOnError)

		authstorageInsertFlags    = flag.NewFlagSet("insert", flag.ExitOnError)
		authstorageInsertBodyFlag = authstorageInsertFlags.String("body", "REQUIRED", "")

		authstorageDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		authstorageDeleteIDFlag = authstorageDeleteFlags.String("id", "REQUIRED", "ID of user to remove")

		authstorageGetFlags     = flag.NewFlagSet("get", flag.ExitOnError)
		authstorageGetIDFlag    = authstorageGetFlags.String("id", "REQUIRED", "Get user by ID")
		authstorageGetViewFlag  = authstorageGetFlags.String("view", "", "")
		authstorageGetTokenFlag = authstorageGetFlags.String("token", "", "")
	)
	authstorageFlags.Usage = authstorageUsage
	authstorageInsertFlags.Usage = authstorageInsertUsage
	authstorageDeleteFlags.Usage = authstorageDeleteUsage
	authstorageGetFlags.Usage = authstorageGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "authstorage":
			svcf = authstorageFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "authstorage":
			switch epn {
			case "insert":
				epf = authstorageInsertFlags

			case "delete":
				epf = authstorageDeleteFlags

			case "get":
				epf = authstorageGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "authstorage":
			c := authstoragec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "insert":
				endpoint = c.Insert()
				data, err = authstoragec.BuildInsertPayload(*authstorageInsertBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = authstoragec.BuildDeletePayload(*authstorageDeleteIDFlag)
			case "get":
				endpoint = c.Get()
				data, err = authstoragec.BuildGetPayload(*authstorageGetIDFlag, *authstorageGetViewFlag, *authstorageGetTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authstorageUsage displays the usage of the authstorage command and its
// subcommands.
func authstorageUsage() {
	fmt.Fprintf(os.Stderr, `The service makes it possible to persist data used by the authservice.
Usage:
    %s [globalflags] authstorage COMMAND [flags]

COMMAND:
    insert: Add new user and return its ID.
    delete: Remove user from storage
    get: Get implements get.

Additional help:
    %s authstorage COMMAND --help
`, os.Args[0], os.Args[0])
}
func authstorageInsertUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] authstorage insert -body JSON

Add new user and return its ID.
    -body JSON: 

Example:
    `+os.Args[0]+` authstorage insert --body '{
      "name": "cbq"
   }'
`, os.Args[0])
}

func authstorageDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] authstorage delete -id STRING

Remove user from storage
    -id STRING: ID of user to remove

Example:
    `+os.Args[0]+` authstorage delete --id "Corporis repellendus et facere voluptatum."
`, os.Args[0])
}

func authstorageGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] authstorage get -id STRING -view STRING -token STRING

Get implements get.
    -id STRING: Get user by ID
    -view STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` authstorage get --id "Voluptatem distinctio et laborum nihil nisi voluptas." --view "default" --token "Sit et accusamus aut qui."
`, os.Args[0])
}
