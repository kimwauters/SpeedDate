// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// repository HTTP client types
//
// Command:
// $ goa gen speeddate/usersvc/design

package client

import (
	repository "speeddate/usersvc/gen/repository"
	repositoryviews "speeddate/usersvc/gen/repository/views"
)

// InsertRequestBody is the type of the "repository" service "insert" endpoint
// HTTP request body.
type InsertRequestBody struct {
	// The username
	Name string `form:"name" json:"name" xml:"name"`
}

// GetResponseBody is the type of the "repository" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// UUID is the unique id of the user.
	ID *string `gorm:"TYPE:uuid; COLUMN:id; PRIMARY_KEY; DEFAULT: gen_random_uuid()" json:"id"`
	// The username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Indicates whether the user is currently online.
	Online *bool `form:"online,omitempty" json:"online,omitempty" xml:"online,omitempty"`
}

// NewInsertRequestBody builds the HTTP request body from the payload of the
// "insert" endpoint of the "repository" service.
func NewInsertRequestBody(p *repository.User) *InsertRequestBody {
	body := &InsertRequestBody{
		Name: p.Name,
	}
	return body
}

// NewGetStoredUserOK builds a "repository" service "get" endpoint result from
// a HTTP "OK" response.
func NewGetStoredUserOK(body *GetResponseBody) *repositoryviews.StoredUserView {
	v := &repositoryviews.StoredUserView{
		ID:     body.ID,
		Name:   body.Name,
		Online: body.Online,
	}
	return v
}
