// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// repository HTTP client CLI support package
//
// Command:
// $ goa gen speeddate/usersvc/design

package client

import (
	"encoding/json"
	"fmt"
	repository "speeddate/usersvc/gen/repository"
	"unicode/utf8"

	goa "goa.design/goa"
)

// BuildInsertPayload builds the payload for the repository insert endpoint
// from CLI flags.
func BuildInsertPayload(repositoryInsertBody string) (*repository.User, error) {
	var err error
	var body InsertRequestBody
	{
		err = json.Unmarshal([]byte(repositoryInsertBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"name\": \"qdv\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &repository.User{
		Name: body.Name,
	}
	return v, nil
}

// BuildDeletePayload builds the payload for the repository delete endpoint
// from CLI flags.
func BuildDeletePayload(repositoryDeleteID string) (*repository.DeletePayload, error) {
	var id string
	{
		id = repositoryDeleteID
	}
	payload := &repository.DeletePayload{
		ID: id,
	}
	return payload, nil
}

// BuildGetPayload builds the payload for the repository get endpoint from CLI
// flags.
func BuildGetPayload(repositoryGetID string, repositoryGetView string) (*repository.GetPayload, error) {
	var id string
	{
		id = repositoryGetID
	}
	var view *string
	{
		if repositoryGetView != "" {
			view = &repositoryGetView
		}
	}
	payload := &repository.GetPayload{
		ID:   id,
		View: view,
	}
	return payload, nil
}
