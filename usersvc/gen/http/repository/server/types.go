// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// repository HTTP server types
//
// Command:
// $ goa gen speeddate/usersvc/design

package server

import (
	repository "speeddate/usersvc/gen/repository"
	repositoryviews "speeddate/usersvc/gen/repository/views"
	"unicode/utf8"

	goa "goa.design/goa"
)

// InsertRequestBody is the type of the "repository" service "insert" endpoint
// HTTP request body.
type InsertRequestBody struct {
	// The username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetResponseBody is the type of the "repository" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// UUID is the unique id of the user.
	ID string `gorm:"TYPE:uuid; COLUMN:id; PRIMARY_KEY; DEFAULT: gen_random_uuid()" json:"id"`
	// The username
	Name string `form:"name" json:"name" xml:"name"`
	// Indicates whether the user is currently online.
	Online *bool `form:"online,omitempty" json:"online,omitempty" xml:"online,omitempty"`
}

// GetResponseBodyTiny is the type of the "repository" service "get" endpoint
// HTTP response body.
type GetResponseBodyTiny struct {
	// UUID is the unique id of the user.
	ID string `gorm:"TYPE:uuid; COLUMN:id; PRIMARY_KEY; DEFAULT: gen_random_uuid()" json:"id"`
	// The username
	Name string `form:"name" json:"name" xml:"name"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "repository" service.
func NewGetResponseBody(res *repositoryviews.StoredUserView) *GetResponseBody {
	body := &GetResponseBody{
		ID:     *res.ID,
		Name:   *res.Name,
		Online: res.Online,
	}
	return body
}

// NewGetResponseBodyTiny builds the HTTP response body from the result of the
// "get" endpoint of the "repository" service.
func NewGetResponseBodyTiny(res *repositoryviews.StoredUserView) *GetResponseBodyTiny {
	body := &GetResponseBodyTiny{
		ID:   *res.ID,
		Name: *res.Name,
	}
	return body
}

// NewInsertUser builds a repository service insert endpoint payload.
func NewInsertUser(body *InsertRequestBody) *repository.User {
	v := &repository.User{
		Name: *body.Name,
	}
	return v
}

// NewDeletePayload builds a repository service delete endpoint payload.
func NewDeletePayload(id string) *repository.DeletePayload {
	return &repository.DeletePayload{
		ID: id,
	}
}

// NewGetPayload builds a repository service get endpoint payload.
func NewGetPayload(id string, view *string) *repository.GetPayload {
	return &repository.GetPayload{
		ID:   id,
		View: view,
	}
}

// Validate runs the validations defined on InsertRequestBody
func (body *InsertRequestBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 50, false))
		}
	}
	return
}
