swagger: "2.0"
info:
  title: Speeddate Userservice
  description: HTTP service for managing users in the SpeedDate-system
  version: ""
host: localhost:8000
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /delete/{id}:
    delete:
      tags:
      - repository
      summary: delete repository
      description: Remove user from storage
      operationId: repository#delete
      parameters:
      - name: id
        in: path
        description: ID of user to remove
        required: true
        type: string
      responses:
        "204":
          description: No Content response.
      schemes:
      - http
  /get/{id}:
    get:
      tags:
      - repository
      summary: get repository
      operationId: repository#get
      parameters:
      - name: view
        in: query
        description: View to render
        required: false
        type: string
        enum:
        - default
        - tiny
      - name: id
        in: path
        description: Get user by ID
        required: true
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/RepositoryGetResponseBody'
        "404":
          description: Not Found response.
          schema:
            $ref: '#/definitions/GetNotFoundResponseBody'
            required:
            - description
            - message
            - id
      schemes:
      - http
  /insert:
    post:
      tags:
      - repository
      summary: insert repository
      description: Add new user and return its ID.
      operationId: repository#insert
      parameters:
      - name: InsertRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/RepositoryInsertRequestBody'
          required:
          - name
      responses:
        "201":
          description: Created response.
          schema:
            type: string
      schemes:
      - http
  /swagger/swagger.json:
    get:
      summary: Download ../../gen/http/openapi.json
      description: JSON document containing the API swagger definition
      operationId: swagger#/swagger/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
definitions:
  GetNotFoundResponseBody:
    title: GetNotFoundResponseBody
    type: object
    properties:
      description:
        type: string
        description: Description of error
        example: Voluptatem eos.
      id:
        type: string
        description: ID of missing user
        example: Expedita possimus repellendus est voluptatum.
      message:
        type: string
        description: Message of error
        example: User 1 not found
    description: User not found
    example:
      description: Inventore qui dicta sit nulla modi.
      id: Vitae atque est ut.
      message: User 1 not found
    required:
    - description
    - message
    - id
  RepositoryGetResponseBody:
    title: 'Mediatype identifier: application/sd.data.stored-user; view=default'
    type: object
    properties:
      id:
        type: string
        description: UUID is the unique id of the user.
        example: f923e008-e511-11e8-9f32-f2801f1b9fd1
      name:
        type: string
        description: The username
        example: qhm
        maxLength: 50
      online:
        type: boolean
        description: Indicates whether the user is currently online.
        example: false
    description: GetResponseBody result type (default view)
    example:
      id: f923e008-e511-11e8-9f32-f2801f1b9fd1
      name: lqg
      online: true
    required:
    - id
    - name
  RepositoryInsertRequestBody:
    title: RepositoryInsertRequestBody
    type: object
    properties:
      name:
        type: string
        description: The username
        example: wyx
        maxLength: 50
    example:
      name: wxb
    required:
    - name
