// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen speeddate/usersvc/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	usersvcc "speeddate/usersvc/gen/http/user/client"

	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `user (insert|delete|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user insert --body '{
      "name": "cfy",
      "online": false
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userInsertFlags    = flag.NewFlagSet("insert", flag.ExitOnError)
		userInsertBodyFlag = userInsertFlags.String("body", "REQUIRED", "")

		userDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		userDeleteIDFlag = userDeleteFlags.String("id", "REQUIRED", "ID of bottle to remove")

		userGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		userGetIDFlag = userGetFlags.String("id", "REQUIRED", "ID of bottle to remove")
	)
	userFlags.Usage = userUsage
	userInsertFlags.Usage = userInsertUsage
	userDeleteFlags.Usage = userDeleteUsage
	userGetFlags.Usage = userGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "user":
			switch epn {
			case "insert":
				epf = userInsertFlags

			case "delete":
				epf = userDeleteFlags

			case "get":
				epf = userGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user":
			c := usersvcc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "insert":
				endpoint = c.Insert()
				data, err = usersvcc.BuildInsertPayload(*userInsertBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = usersvcc.BuildDeletePayload(*userDeleteIDFlag)
			case "get":
				endpoint = c.Get()
				data, err = usersvcc.BuildGetPayload(*userGetIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `The storage service makes it possible to view, add or remove wine bottles.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    insert: Add new bottle and return its ID.
    delete: Remove bottle from storage
    get: Get implements get.

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userInsertUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user insert -body JSON

Add new bottle and return its ID.
    -body JSON: 

Example:
    `+os.Args[0]+` user insert --body '{
      "name": "cfy",
      "online": false
   }'
`, os.Args[0])
}

func userDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user delete -id STRING

Remove bottle from storage
    -id STRING: ID of bottle to remove

Example:
    `+os.Args[0]+` user delete --id "Reprehenderit ea quam optio placeat."
`, os.Args[0])
}

func userGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get -id STRING

Get implements get.
    -id STRING: ID of bottle to remove

Example:
    `+os.Args[0]+` user get --id "Occaecati ut excepturi et deleniti quis."
`, os.Args[0])
}
