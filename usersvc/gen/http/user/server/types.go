// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen speeddate/usersvc/design

package server

import (
	usersvc "speeddate/usersvc/gen/user"
	usersvcviews "speeddate/usersvc/gen/user/views"
	"unicode/utf8"

	goa "goa.design/goa"
)

// InsertRequestBody is the type of the "user" service "insert" endpoint HTTP
// request body.
type InsertRequestBody struct {
	// The username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Indicates whether the user is currently online.
	Online *bool `form:"online,omitempty" json:"online,omitempty" xml:"online,omitempty"`
}

// GetResponseBody is the type of the "user" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// UUID is the unique id of the user.
	ID string `form:"id" json:"id" xml:"id"`
	// The username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Indicates whether the user is currently online.
	Online bool `form:"online,omitempty" json:"online,omitempty" xml:"online,omitempty"`
}

// GetNoMatchResponseBody is the type of the "user" service "get" endpoint HTTP
// response body for the "no_match" error.
type GetNoMatchResponseBody string

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "user" service.
func NewGetResponseBody(res *usersvcviews.StoredUserView) *GetResponseBody {
	body := &GetResponseBody{
		ID:   *res.ID,
		Name: res.Name,
	}
	if res.Online != nil {
		body.Online = *res.Online
	}
	if res.Online == nil {
		body.Online = false
	}
	return body
}

// NewGetNoMatchResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "user" service.
func NewGetNoMatchResponseBody(res usersvc.NoMatch) GetNoMatchResponseBody {
	body := GetNoMatchResponseBody(res)
	return body
}

// NewInsertUser builds a user service insert endpoint payload.
func NewInsertUser(body *InsertRequestBody) *usersvc.User {
	v := &usersvc.User{
		Name: *body.Name,
	}
	if body.Online != nil {
		v.Online = *body.Online
	}
	if body.Online == nil {
		v.Online = false
	}
	return v
}

// NewDeletePayload builds a user service delete endpoint payload.
func NewDeletePayload(id string) *usersvc.DeletePayload {
	return &usersvc.DeletePayload{
		ID: id,
	}
}

// NewGetPayload builds a user service get endpoint payload.
func NewGetPayload(id string) *usersvc.GetPayload {
	return &usersvc.GetPayload{
		ID: id,
	}
}

// Validate runs the validations defined on InsertRequestBody
func (body *InsertRequestBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 50, false))
		}
	}
	return
}
