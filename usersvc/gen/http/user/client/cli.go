// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen speeddate/usersvc/design

package client

import (
	"encoding/json"
	"fmt"
	usersvc "speeddate/usersvc/gen/user"
	"unicode/utf8"

	goa "goa.design/goa"
)

// BuildInsertPayload builds the payload for the user insert endpoint from CLI
// flags.
func BuildInsertPayload(userInsertBody string) (*usersvc.User, error) {
	var err error
	var body InsertRequestBody
	{
		err = json.Unmarshal([]byte(userInsertBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"name\": \"cfy\",\n      \"online\": false\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &usersvc.User{
		Name:   body.Name,
		Online: body.Online,
	}
	return v, nil
}

// BuildDeletePayload builds the payload for the user delete endpoint from CLI
// flags.
func BuildDeletePayload(userDeleteID string) (*usersvc.DeletePayload, error) {
	var id string
	{
		id = userDeleteID
	}
	payload := &usersvc.DeletePayload{
		ID: id,
	}
	return payload, nil
}

// BuildGetPayload builds the payload for the user get endpoint from CLI flags.
func BuildGetPayload(userGetID string) (*usersvc.GetPayload, error) {
	var id string
	{
		id = userGetID
	}
	payload := &usersvc.GetPayload{
		ID: id,
	}
	return payload, nil
}
