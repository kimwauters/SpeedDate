// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen speeddate/usersvc/design

package client

import (
	usersvc "speeddate/usersvc/gen/user"
	usersvcviews "speeddate/usersvc/gen/user/views"
)

// InsertRequestBody is the type of the "user" service "insert" endpoint HTTP
// request body.
type InsertRequestBody struct {
	// The username
	Name string `form:"name" json:"name" xml:"name"`
	// Indicates whether the user is currently online.
	Online bool `form:"online,omitempty" json:"online,omitempty" xml:"online,omitempty"`
}

// GetResponseBody is the type of the "user" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// UUID is the unique id of the user.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Indicates whether the user is currently online.
	Online *bool `form:"online,omitempty" json:"online,omitempty" xml:"online,omitempty"`
}

// GetNoMatchResponseBody is the type of the "user" service "get" endpoint HTTP
// response body for the "no_match" error.
type GetNoMatchResponseBody string

// NewInsertRequestBody builds the HTTP request body from the payload of the
// "insert" endpoint of the "user" service.
func NewInsertRequestBody(p *usersvc.User) *InsertRequestBody {
	body := &InsertRequestBody{
		Name:   p.Name,
		Online: p.Online,
	}
	return body
}

// NewGetStoredUserOK builds a "user" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetStoredUserOK(body *GetResponseBody) *usersvcviews.StoredUserView {
	v := &usersvcviews.StoredUserView{
		ID:     body.ID,
		Name:   body.Name,
		Online: body.Online,
	}
	if body.Online == nil {
		var tmp bool = false
		v.Online = &tmp
	}
	return v
}

// NewGetNoMatch builds a user service get endpoint no_match error.
func NewGetNoMatch(body GetNoMatchResponseBody) usersvc.NoMatch {
	v := usersvc.NoMatch(body)
	return v
}
