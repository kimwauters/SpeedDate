// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// repository client
//
// Command:
// $ goa gen github.com/proepkes/speeddate/usersvc/design

package repository

import (
	"context"

	goa "goa.design/goa"
)

// Client is the "repository" service client.
type Client struct {
	InsertEndpoint goa.Endpoint
	DeleteEndpoint goa.Endpoint
	GetEndpoint    goa.Endpoint
}

// NewClient initializes a "repository" service client given the endpoints.
func NewClient(insert, delete_, get goa.Endpoint) *Client {
	return &Client{
		InsertEndpoint: insert,
		DeleteEndpoint: delete_,
		GetEndpoint:    get,
	}
}

// Insert calls the "insert" endpoint of the "repository" service.
func (c *Client) Insert(ctx context.Context, p *User) (res string, err error) {
	var ires interface{}
	ires, err = c.InsertEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Delete calls the "delete" endpoint of the "repository" service.
// Delete may return the following errors:
//	- "not_found" (type *NotFound): User not found
//	- error: internal error
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}

// Get calls the "get" endpoint of the "repository" service.
// Get may return the following errors:
//	- "not_found" (type *NotFound): User not found
//	- error: internal error
func (c *Client) Get(ctx context.Context, p *GetPayload) (res *StoredUser, err error) {
	var ires interface{}
	ires, err = c.GetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*StoredUser), nil
}
