// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// user endpoints
//
// Command:
// $ goa gen speeddate/usersvc/design

package usersvc

import (
	"context"

	goa "goa.design/goa"
)

// Endpoints wraps the "user" service endpoints.
type Endpoints struct {
	Insert goa.Endpoint
	Delete goa.Endpoint
	Get    goa.Endpoint
}

// NewEndpoints wraps the methods of the "user" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Insert: NewInsertEndpoint(s),
		Delete: NewDeleteEndpoint(s),
		Get:    NewGetEndpoint(s),
	}
}

// Use applies the given middleware to all the "user" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Insert = m(e.Insert)
	e.Delete = m(e.Delete)
	e.Get = m(e.Get)
}

// NewInsertEndpoint returns an endpoint function that calls the method
// "insert" of service "user".
func NewInsertEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*User)
		return s.Insert(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "user".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "user".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetPayload)
		res, err := s.Get(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredUser(res, "default")
		return vres, nil
	}
}
